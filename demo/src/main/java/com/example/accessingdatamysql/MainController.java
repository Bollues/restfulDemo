package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import com.alibaba.fastjson.JSON;
import java.util.Map;
// import java.io.*;
// import java.lang.System.*;


@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called todoListRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private TodoListRepository todoListRepository;

  @GetMapping(path="/getTodos")
  public @ResponseBody Iterable<TodoList> getAllTodos() {
    // This returns a JSON or XML with the todos
    return todoListRepository.findAll();
  }

  @PostMapping(path="/addTodo", produces="application/json;charset=UTF-8") // Map ONLY POST Requests
  public @ResponseBody String addNewTodo (@RequestBody String todo) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    // TodoList todoObj = new TodoList();
    System.out.println("----------------------------" + todo);
    Map<String, Object> todoObj = JSON.parseObject(todo, Map.class);
    
    TodoList newtodoObj = new TodoList();
    newtodoObj.setId(todoObj.get("id").toString());
    newtodoObj.setText(todoObj.get("text").toString());
    newtodoObj.setFinished(false);
    // newtodoObj.setFinished((int)(todoObj.get("finished")) == 1 ? true : false);
    todoListRepository.save(newtodoObj);
    return "Saved";
  }

  @PostMapping(path="/finishTodo")
  public @ResponseBody String fininshTodo (@RequestParam Boolean finished) {
    // todoObj.setFinished(finished);
    // todoListRepository.save(todoObj);
    return "Saved";
  }

  @DeleteMapping(path="/delTodo")
  public @ResponseBody String deleteTodo (@RequestParam String id) {
    // todoObj.setFinished(finished);
    // todoListRepository.save(todoObj);
    return "Saved";
  }
}